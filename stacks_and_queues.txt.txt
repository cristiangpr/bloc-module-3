1. What is the main difference between a stack and a queue?
A: Stacks work with last in first out prioritized entries while queues wor with first in first out.

What are the similarities between stacks and queues?

A:They are both data structures that enable engineers to rank tasks, create an order of operations, and support system functions.

Imagine you are an engineer tasked with implementing the UNDO and REDO options in a word processor such as Microsoft Word. Which data structure would you use for each option and why?

A: A stck would be used for both because with UNDO the last action completed would be the first to be undone . With REDO the removed actions would be placed back at the top of the stack.

Programming Questions
You may program the following question in any language of your choice. Before you begin coding, write out a plan as to how you will solve the question.

Given a string, reverse it using a stack. For example, the string "Bloc!" should be converted to "!colB".

var str ="Bloc!"
function reverse(str) {
    var stack = [];
  
    for (var i = 0; i < str.length; i++) {
        stack.push(str[i]);
    }
   
    var reverseStr = '';
    while (stack.length > 0) {
        reverseStr += stack.pop();
    }
  
}

Implement the pop method of a stack using one queue. Make a FIFO data structure mirror the functionality of a LIFO data structure. Since the internal list is not the same as defined in the checkpoint, it may help to rewrite the pseudocode first.

class Stack {
  constructor(){
    this.pop = function(queue){
      var newQueue = [];
      var itemToDelete = [];

      for(var i = 0; i < queue.length; i++){
        if(i == queue.length - 1){
          itemToDelete.push(queue[i]);
        } else {
          newQueue.push(queue[i]);
        }
      }

      return itemToDelete;
    }
  }
}
   


To delete an item, take all of the elements in the queue one at a time and put them at the end of the queue, except for the last one which should be removed and returned.

class Stack {
  constructor(){
    this.pop = function(queue){
      var newQueue = [];
      var itemToDelete = [];

      for(var i = 0; i < queue.length; i++){
        if(i == queue.length - 1){
          itemToDelete.push(queue[i]);
        } else {
          newQueue.push(queue[i]);
        }
      }

      return itemToDelete;
    }
  }
}


Implement the enqueue and dequeue methods defined in the checkpoint inside your own Queue class.


class Queue {
   constructor(){
     this.elements = []
   }
  
 // enqueue function

  enqueue(element)
{    
    this.elements.push(element);
}

  // dequeue function

  dequeue()
{
    if(this.isEmpty())
        return "Empty";
    return this.elements.shift();
}
  
isEmpty()
{
    return this.elements.length ==0;
}

}