Exercises
For exercises requiring code, you are free to use the language of your choice.

1. What is a hash table?
A hash table is a data structure that is used to store keys/value pairs. It uses a hash function to compute an index into an array in which an element will be inserted or searched

2. What is hashing?
A:  Hashing is the conversion from a string to a numerical index. A hashing function is used to convert the key to a specific, fixed-length number, referred to as a hash code

3. How does a hash table store data?
A:  by converting the key into a hash code and storing it in an array index.

4. How are hash tables and objects different?
A: Objects are used to store a static number of distinct values of different types. Hash tables for a variable number of consistently formatted values, each with an identifier.

5. Determine whether you would use a hash table or an object to store each of the following pieces of data:


* A list of pets and their unique names.
A: Hash table. variable number of consistently formatted values.

* The name, age, and the birthday of your best friend.
A: Object. Static  number of of values of different types. 

* The name and location of every company in a given city.
A: Object

* All of the books checked out from a library by a particular individual.
A: Hash table

* The primary and secondary phone numbers for a contact.
A: Hash table

6. Build a system that allows a sales associate to enter a customer's name, address, and phone number into the system and look up customers using their phone numbers. Store this information in a hash table.
A:
  class HashTable {
  constructor() {
     this.storage = [];
     this.maxStorage = 200;
  }

  hash(string, max) {
     let hash = 0;
    

     for (let i = 0; i < string.length; i++) {
        hash += string.charCodeAt(i);
     }
     return hash % max;

     
  }

     add(value) {
     var key = value.phone;
     var index = this.hash(key, this.maxStorage);
     var inserted = false;

     if (this.storage[index] === undefined) {
        this.storage[index] = value;

     }
      else {

       
       for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([value]);
     }
      }
     }
      lookup({phone}) {
        let key = phone;
        let index = this.hash(key, this.maxStorage);

        if(!this.storage[index]){
            return console.log('Not found');
        } else {

        return console.log(this.storage[index]);

        
        }
    }

};
  
  




var ht = new HashTable();
ht.add({phone: '4156768909', name:'Doug', address:' 356 Parsons St.'});
ht.add({phone: '7072234923', name:'Bart',address:'200 Evergreen Terrace.'});
ht.add({phone: '8212323123', name:'Mike',address:'354 Hunt St.'});

ht.lookup({phone: '4156768909'});


7. Build a system that allows a store owner to track their store's inventory using a hash table for storage.

A:
  class HashTable {
  constructor() {
     this.storage = [];
     this.maxStorage = 200;
  }

  hash(string, max) {
     let hash = 0;
    

     for (let i = 0; i < string.length; i++) {
        hash += string.charCodeAt(i);
     }
     return hash % max;

     
  }

     add(value) {
     var key = value.code;
     var index = this.hash(key, this.maxStorage);
     var inserted = false;

     if (this.storage[index] === undefined) {
        this.storage[index] = value;

     }
      else {

    
       for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([value]);
     }
      }
     }
      lookup({code}) {
        let key = code;
        let index = this.hash(key, this.maxStorage);

        if(!this.storage[index]){
            return console.log('Not found');
        } else {

        return console.log(this.storage[index]);

        
        }
    }
      

}
  
  




var ht = new HashTable();
ht.add({code: 'kj154', product:'bread'});
ht.add({code: 'pl564', product:'milk'});
ht.add({code: 'bo156', product:'eggs'});


ht.lookup({code: 'kj154'});
ht.lookup({code: 'le423'});

8. Build a system that allows digital copies of newspapers to be entered and searched by publisher and publication date. Use hash tables to store the necessary data.

  class HashTable {
  constructor() {
     this.storage = [];
     this.maxStorage = 200;
  }

  hash(string, max) {
     let hash = 0;
    

     for (let i = 0; i < string.length; i++) {
        hash += string.charCodeAt(i);
     }
     return hash % max;

     
  }

     add(value) {
     var key = value.publisher + value.date;
     var index = this.hash(key, this.maxStorage);
     var inserted = false;

     if (this.storage[index] === undefined) {
        this.storage[index] = value;

     }
      else {

    
       for (var i = 0; i < storage[index].length; i++) {
        if (storage[index][i][0] === key) {
         storage[index][i][1] = value;
         inserted = true;
       }
     }
     if (inserted === false) {
       storage[index].push([value]);
     }
      }
     }
      lookup({publisher, date}) {
        let key = publisher + date;
        let index = this.hash(key, this.maxStorage);

        if(!this.storage[index]){
            return console.log('Not found');
        } else {

        return console.log(this.storage[index]);

        
        }
    }
      

}
  
  




var ht = new HashTable();
ht.add ({publisher: 'NY Times', date: '04-12-1999', headline: 'We Love Ny'});
ht.add( {publisher: 'SF Cronicle', date: '06-10-1985', headline: 'Rice-A-Roni is our Treat!'});
ht.add({publisher: 'Washington Post', date:'08-02-1977', headline: 'Best day Ever!'});


ht.lookup({publisher: 'NY Times', date: '04-12-1999'});
ht.lookup({publisher: 'SF Cronicle', date: '06-10-1985'});
ht.lookup({publisher: 'Wall Street Journal', date: '07-12-2010'});